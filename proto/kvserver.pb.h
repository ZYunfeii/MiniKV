// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kvserver.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_kvserver_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_kvserver_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_kvserver_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_kvserver_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kvserver_2eproto;
namespace kv {
class GetKResponse;
struct GetKResponseDefaultTypeInternal;
extern GetKResponseDefaultTypeInternal _GetKResponse_default_instance_;
class ReqK;
struct ReqKDefaultTypeInternal;
extern ReqKDefaultTypeInternal _ReqK_default_instance_;
class ReqKV;
struct ReqKVDefaultTypeInternal;
extern ReqKVDefaultTypeInternal _ReqKV_default_instance_;
class SetKVResponse;
struct SetKVResponseDefaultTypeInternal;
extern SetKVResponseDefaultTypeInternal _SetKVResponse_default_instance_;
}  // namespace kv
PROTOBUF_NAMESPACE_OPEN
template<> ::kv::GetKResponse* Arena::CreateMaybeMessage<::kv::GetKResponse>(Arena*);
template<> ::kv::ReqK* Arena::CreateMaybeMessage<::kv::ReqK>(Arena*);
template<> ::kv::ReqKV* Arena::CreateMaybeMessage<::kv::ReqKV>(Arena*);
template<> ::kv::SetKVResponse* Arena::CreateMaybeMessage<::kv::SetKVResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kv {

// ===================================================================

class ReqKV final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kv.ReqKV) */ {
 public:
  inline ReqKV() : ReqKV(nullptr) {}
  ~ReqKV() override;
  explicit constexpr ReqKV(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqKV(const ReqKV& from);
  ReqKV(ReqKV&& from) noexcept
    : ReqKV() {
    *this = ::std::move(from);
  }

  inline ReqKV& operator=(const ReqKV& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqKV& operator=(ReqKV&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqKV& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqKV* internal_default_instance() {
    return reinterpret_cast<const ReqKV*>(
               &_ReqKV_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ReqKV& a, ReqKV& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqKV* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqKV* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqKV* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReqKV>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReqKV& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReqKV& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqKV* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kv.ReqKV";
  }
  protected:
  explicit ReqKV(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kValFieldNumber = 3,
    kEncodingFieldNumber = 1,
  };
  // string key = 2;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string val = 3;
  void clear_val();
  const std::string& val() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_val(ArgT0&& arg0, ArgT... args);
  std::string* mutable_val();
  PROTOBUF_NODISCARD std::string* release_val();
  void set_allocated_val(std::string* val);
  private:
  const std::string& _internal_val() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_val(const std::string& value);
  std::string* _internal_mutable_val();
  public:

  // uint32 encoding = 1;
  void clear_encoding();
  uint32_t encoding() const;
  void set_encoding(uint32_t value);
  private:
  uint32_t _internal_encoding() const;
  void _internal_set_encoding(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:kv.ReqKV)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr val_;
  uint32_t encoding_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kvserver_2eproto;
};
// -------------------------------------------------------------------

class SetKVResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kv.SetKVResponse) */ {
 public:
  inline SetKVResponse() : SetKVResponse(nullptr) {}
  ~SetKVResponse() override;
  explicit constexpr SetKVResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetKVResponse(const SetKVResponse& from);
  SetKVResponse(SetKVResponse&& from) noexcept
    : SetKVResponse() {
    *this = ::std::move(from);
  }

  inline SetKVResponse& operator=(const SetKVResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetKVResponse& operator=(SetKVResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetKVResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetKVResponse* internal_default_instance() {
    return reinterpret_cast<const SetKVResponse*>(
               &_SetKVResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SetKVResponse& a, SetKVResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetKVResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetKVResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetKVResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetKVResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetKVResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetKVResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetKVResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kv.SetKVResponse";
  }
  protected:
  explicit SetKVResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagFieldNumber = 1,
  };
  // bool flag = 1;
  void clear_flag();
  bool flag() const;
  void set_flag(bool value);
  private:
  bool _internal_flag() const;
  void _internal_set_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:kv.SetKVResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kvserver_2eproto;
};
// -------------------------------------------------------------------

class ReqK final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kv.ReqK) */ {
 public:
  inline ReqK() : ReqK(nullptr) {}
  ~ReqK() override;
  explicit constexpr ReqK(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqK(const ReqK& from);
  ReqK(ReqK&& from) noexcept
    : ReqK() {
    *this = ::std::move(from);
  }

  inline ReqK& operator=(const ReqK& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqK& operator=(ReqK&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqK& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqK* internal_default_instance() {
    return reinterpret_cast<const ReqK*>(
               &_ReqK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ReqK& a, ReqK& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqK* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqK* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqK* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReqK>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReqK& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReqK& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqK* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kv.ReqK";
  }
  protected:
  explicit ReqK(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:kv.ReqK)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kvserver_2eproto;
};
// -------------------------------------------------------------------

class GetKResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kv.GetKResponse) */ {
 public:
  inline GetKResponse() : GetKResponse(nullptr) {}
  ~GetKResponse() override;
  explicit constexpr GetKResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetKResponse(const GetKResponse& from);
  GetKResponse(GetKResponse&& from) noexcept
    : GetKResponse() {
    *this = ::std::move(from);
  }

  inline GetKResponse& operator=(const GetKResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetKResponse& operator=(GetKResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetKResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetKResponse* internal_default_instance() {
    return reinterpret_cast<const GetKResponse*>(
               &_GetKResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetKResponse& a, GetKResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetKResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetKResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetKResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetKResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetKResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetKResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetKResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kv.GetKResponse";
  }
  protected:
  explicit GetKResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValFieldNumber = 2,
    kFlagFieldNumber = 1,
  };
  // repeated string val = 2;
  int val_size() const;
  private:
  int _internal_val_size() const;
  public:
  void clear_val();
  const std::string& val(int index) const;
  std::string* mutable_val(int index);
  void set_val(int index, const std::string& value);
  void set_val(int index, std::string&& value);
  void set_val(int index, const char* value);
  void set_val(int index, const char* value, size_t size);
  std::string* add_val();
  void add_val(const std::string& value);
  void add_val(std::string&& value);
  void add_val(const char* value);
  void add_val(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& val() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_val();
  private:
  const std::string& _internal_val(int index) const;
  std::string* _internal_add_val();
  public:

  // bool flag = 1;
  void clear_flag();
  bool flag() const;
  void set_flag(bool value);
  private:
  bool _internal_flag() const;
  void _internal_set_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:kv.GetKResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> val_;
  bool flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kvserver_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReqKV

// uint32 encoding = 1;
inline void ReqKV::clear_encoding() {
  encoding_ = 0u;
}
inline uint32_t ReqKV::_internal_encoding() const {
  return encoding_;
}
inline uint32_t ReqKV::encoding() const {
  // @@protoc_insertion_point(field_get:kv.ReqKV.encoding)
  return _internal_encoding();
}
inline void ReqKV::_internal_set_encoding(uint32_t value) {
  
  encoding_ = value;
}
inline void ReqKV::set_encoding(uint32_t value) {
  _internal_set_encoding(value);
  // @@protoc_insertion_point(field_set:kv.ReqKV.encoding)
}

// string key = 2;
inline void ReqKV::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& ReqKV::key() const {
  // @@protoc_insertion_point(field_get:kv.ReqKV.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqKV::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kv.ReqKV.key)
}
inline std::string* ReqKV::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:kv.ReqKV.key)
  return _s;
}
inline const std::string& ReqKV::_internal_key() const {
  return key_.Get();
}
inline void ReqKV::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqKV::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqKV::release_key() {
  // @@protoc_insertion_point(field_release:kv.ReqKV.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqKV::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kv.ReqKV.key)
}

// string val = 3;
inline void ReqKV::clear_val() {
  val_.ClearToEmpty();
}
inline const std::string& ReqKV::val() const {
  // @@protoc_insertion_point(field_get:kv.ReqKV.val)
  return _internal_val();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqKV::set_val(ArgT0&& arg0, ArgT... args) {
 
 val_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kv.ReqKV.val)
}
inline std::string* ReqKV::mutable_val() {
  std::string* _s = _internal_mutable_val();
  // @@protoc_insertion_point(field_mutable:kv.ReqKV.val)
  return _s;
}
inline const std::string& ReqKV::_internal_val() const {
  return val_.Get();
}
inline void ReqKV::_internal_set_val(const std::string& value) {
  
  val_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqKV::_internal_mutable_val() {
  
  return val_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqKV::release_val() {
  // @@protoc_insertion_point(field_release:kv.ReqKV.val)
  return val_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqKV::set_allocated_val(std::string* val) {
  if (val != nullptr) {
    
  } else {
    
  }
  val_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), val,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (val_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    val_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kv.ReqKV.val)
}

// -------------------------------------------------------------------

// SetKVResponse

// bool flag = 1;
inline void SetKVResponse::clear_flag() {
  flag_ = false;
}
inline bool SetKVResponse::_internal_flag() const {
  return flag_;
}
inline bool SetKVResponse::flag() const {
  // @@protoc_insertion_point(field_get:kv.SetKVResponse.flag)
  return _internal_flag();
}
inline void SetKVResponse::_internal_set_flag(bool value) {
  
  flag_ = value;
}
inline void SetKVResponse::set_flag(bool value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:kv.SetKVResponse.flag)
}

// -------------------------------------------------------------------

// ReqK

// string key = 1;
inline void ReqK::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& ReqK::key() const {
  // @@protoc_insertion_point(field_get:kv.ReqK.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqK::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kv.ReqK.key)
}
inline std::string* ReqK::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:kv.ReqK.key)
  return _s;
}
inline const std::string& ReqK::_internal_key() const {
  return key_.Get();
}
inline void ReqK::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqK::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqK::release_key() {
  // @@protoc_insertion_point(field_release:kv.ReqK.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqK::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kv.ReqK.key)
}

// -------------------------------------------------------------------

// GetKResponse

// bool flag = 1;
inline void GetKResponse::clear_flag() {
  flag_ = false;
}
inline bool GetKResponse::_internal_flag() const {
  return flag_;
}
inline bool GetKResponse::flag() const {
  // @@protoc_insertion_point(field_get:kv.GetKResponse.flag)
  return _internal_flag();
}
inline void GetKResponse::_internal_set_flag(bool value) {
  
  flag_ = value;
}
inline void GetKResponse::set_flag(bool value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:kv.GetKResponse.flag)
}

// repeated string val = 2;
inline int GetKResponse::_internal_val_size() const {
  return val_.size();
}
inline int GetKResponse::val_size() const {
  return _internal_val_size();
}
inline void GetKResponse::clear_val() {
  val_.Clear();
}
inline std::string* GetKResponse::add_val() {
  std::string* _s = _internal_add_val();
  // @@protoc_insertion_point(field_add_mutable:kv.GetKResponse.val)
  return _s;
}
inline const std::string& GetKResponse::_internal_val(int index) const {
  return val_.Get(index);
}
inline const std::string& GetKResponse::val(int index) const {
  // @@protoc_insertion_point(field_get:kv.GetKResponse.val)
  return _internal_val(index);
}
inline std::string* GetKResponse::mutable_val(int index) {
  // @@protoc_insertion_point(field_mutable:kv.GetKResponse.val)
  return val_.Mutable(index);
}
inline void GetKResponse::set_val(int index, const std::string& value) {
  val_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:kv.GetKResponse.val)
}
inline void GetKResponse::set_val(int index, std::string&& value) {
  val_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:kv.GetKResponse.val)
}
inline void GetKResponse::set_val(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  val_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kv.GetKResponse.val)
}
inline void GetKResponse::set_val(int index, const char* value, size_t size) {
  val_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kv.GetKResponse.val)
}
inline std::string* GetKResponse::_internal_add_val() {
  return val_.Add();
}
inline void GetKResponse::add_val(const std::string& value) {
  val_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kv.GetKResponse.val)
}
inline void GetKResponse::add_val(std::string&& value) {
  val_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kv.GetKResponse.val)
}
inline void GetKResponse::add_val(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  val_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kv.GetKResponse.val)
}
inline void GetKResponse::add_val(const char* value, size_t size) {
  val_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kv.GetKResponse.val)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetKResponse::val() const {
  // @@protoc_insertion_point(field_list:kv.GetKResponse.val)
  return val_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetKResponse::mutable_val() {
  // @@protoc_insertion_point(field_mutable_list:kv.GetKResponse.val)
  return &val_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace kv

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_kvserver_2eproto
