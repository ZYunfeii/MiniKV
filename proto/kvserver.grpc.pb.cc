// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: kvserver.proto

#include "kvserver.pb.h"
#include "kvserver.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace kv {

static const char* KVServer_method_names[] = {
  "/kv.KVServer/SetKV",
  "/kv.KVServer/GetKV",
};

std::unique_ptr< KVServer::Stub> KVServer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< KVServer::Stub> stub(new KVServer::Stub(channel, options));
  return stub;
}

KVServer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SetKV_(KVServer_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetKV_(KVServer_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status KVServer::Stub::SetKV(::grpc::ClientContext* context, const ::kv::ReqKV& request, ::kv::SetKVResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::kv::ReqKV, ::kv::SetKVResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetKV_, context, request, response);
}

void KVServer::Stub::async::SetKV(::grpc::ClientContext* context, const ::kv::ReqKV* request, ::kv::SetKVResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::kv::ReqKV, ::kv::SetKVResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetKV_, context, request, response, std::move(f));
}

void KVServer::Stub::async::SetKV(::grpc::ClientContext* context, const ::kv::ReqKV* request, ::kv::SetKVResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetKV_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::kv::SetKVResponse>* KVServer::Stub::PrepareAsyncSetKVRaw(::grpc::ClientContext* context, const ::kv::ReqKV& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::kv::SetKVResponse, ::kv::ReqKV, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetKV_, context, request);
}

::grpc::ClientAsyncResponseReader< ::kv::SetKVResponse>* KVServer::Stub::AsyncSetKVRaw(::grpc::ClientContext* context, const ::kv::ReqKV& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetKVRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status KVServer::Stub::GetKV(::grpc::ClientContext* context, const ::kv::ReqK& request, ::kv::GetKResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::kv::ReqK, ::kv::GetKResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetKV_, context, request, response);
}

void KVServer::Stub::async::GetKV(::grpc::ClientContext* context, const ::kv::ReqK* request, ::kv::GetKResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::kv::ReqK, ::kv::GetKResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetKV_, context, request, response, std::move(f));
}

void KVServer::Stub::async::GetKV(::grpc::ClientContext* context, const ::kv::ReqK* request, ::kv::GetKResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetKV_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::kv::GetKResponse>* KVServer::Stub::PrepareAsyncGetKVRaw(::grpc::ClientContext* context, const ::kv::ReqK& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::kv::GetKResponse, ::kv::ReqK, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetKV_, context, request);
}

::grpc::ClientAsyncResponseReader< ::kv::GetKResponse>* KVServer::Stub::AsyncGetKVRaw(::grpc::ClientContext* context, const ::kv::ReqK& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetKVRaw(context, request, cq);
  result->StartCall();
  return result;
}

KVServer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KVServer_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KVServer::Service, ::kv::ReqKV, ::kv::SetKVResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](KVServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::kv::ReqKV* req,
             ::kv::SetKVResponse* resp) {
               return service->SetKV(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KVServer_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KVServer::Service, ::kv::ReqK, ::kv::GetKResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](KVServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::kv::ReqK* req,
             ::kv::GetKResponse* resp) {
               return service->GetKV(ctx, req, resp);
             }, this)));
}

KVServer::Service::~Service() {
}

::grpc::Status KVServer::Service::SetKV(::grpc::ServerContext* context, const ::kv::ReqKV* request, ::kv::SetKVResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KVServer::Service::GetKV(::grpc::ServerContext* context, const ::kv::ReqK* request, ::kv::GetKResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace kv

